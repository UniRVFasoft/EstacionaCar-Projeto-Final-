{"ast":null,"code":"export class HistoryComponent {\n  constructor() {\n    this.garage = [];\n  }\n  ngOnInit() {\n    const savedGarage = localStorage.getItem('garage');\n    if (savedGarage) {\n      this.garage = JSON.parse(savedGarage);\n    }\n  }\n  calculateDuration(entryTime) {\n    const entry = new Date(entryTime);\n    const now = new Date();\n    const diff = Math.abs(now.getTime() - entry.getTime());\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n    return `${hours}h ${minutes}min`;\n  }\n  deleteCar(id) {\n    const confirmDelete = confirm('Tem certeza de que deseja excluir este carro?');\n    if (confirmDelete) {\n      this.garage = this.garage.filter(car => car.id !== id);\n      this.saveGarage(); // Salvar a lista atualizada no armazenamento local\n    }\n  }\n\n  saveGarage() {\n    localStorage.setItem('garage', JSON.stringify(this.garage));\n  }\n}","map":{"version":3,"names":["HistoryComponent","constructor","garage","ngOnInit","savedGarage","localStorage","getItem","JSON","parse","calculateDuration","entryTime","entry","Date","now","diff","Math","abs","getTime","hours","floor","minutes","deleteCar","id","confirmDelete","confirm","filter","car","saveGarage","setItem","stringify"],"sources":["C:\\Users\\rafae\\OneDrive\\Documentos\\estacionamento2\\src\\app\\history\\history.component.ts"],"sourcesContent":["export class HistoryComponent implements OnInit {\n  garage: Car[] = [];\n\n  constructor() { }\n\n  ngOnInit() {\n    const savedGarage = localStorage.getItem('garage');\n    if (savedGarage) {\n      this.garage = JSON.parse(savedGarage);\n    }\n  }\n\n  calculateDuration(entryTime: string): string {\n    const entry = new Date(entryTime);\n    const now = new Date();\n    const diff = Math.abs(now.getTime() - entry.getTime());\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n    return `${hours}h ${minutes}min`;\n  }\n\n  deleteCar(id: number) {\n    const confirmDelete = confirm('Tem certeza de que deseja excluir este carro?');\n    if (confirmDelete) {\n      this.garage = this.garage.filter(car => car.id !== id);\n      this.saveGarage(); // Salvar a lista atualizada no armazenamento local\n    }\n  }\n\n  saveGarage() {\n    localStorage.setItem('garage', JSON.stringify(this.garage));\n  }\n}\n"],"mappings":"AAAA,OAAM,MAAOA,gBAAgB;EAG3BC,YAAA;IAFA,KAAAC,MAAM,GAAU,EAAE;EAEF;EAEhBC,QAAQA,CAAA;IACN,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAClD,IAAIF,WAAW,EAAE;MACf,IAAI,CAACF,MAAM,GAAGK,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC;;EAEzC;EAEAK,iBAAiBA,CAACC,SAAiB;IACjC,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAACF,SAAS,CAAC;IACjC,MAAMG,GAAG,GAAG,IAAID,IAAI,EAAE;IACtB,MAAME,IAAI,GAAGC,IAAI,CAACC,GAAG,CAACH,GAAG,CAACI,OAAO,EAAE,GAAGN,KAAK,CAACM,OAAO,EAAE,CAAC;IACtD,MAAMC,KAAK,GAAGH,IAAI,CAACI,KAAK,CAACL,IAAI,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IACjD,MAAMM,OAAO,GAAGL,IAAI,CAACI,KAAK,CAAEL,IAAI,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,IAAK,IAAI,GAAG,EAAE,CAAC,CAAC;IACnE,OAAO,GAAGI,KAAK,KAAKE,OAAO,KAAK;EAClC;EAEAC,SAASA,CAACC,EAAU;IAClB,MAAMC,aAAa,GAAGC,OAAO,CAAC,+CAA+C,CAAC;IAC9E,IAAID,aAAa,EAAE;MACjB,IAAI,CAACrB,MAAM,GAAG,IAAI,CAACA,MAAM,CAACuB,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACJ,EAAE,KAAKA,EAAE,CAAC;MACtD,IAAI,CAACK,UAAU,EAAE,CAAC,CAAC;;EAEvB;;EAEAA,UAAUA,CAAA;IACRtB,YAAY,CAACuB,OAAO,CAAC,QAAQ,EAAErB,IAAI,CAACsB,SAAS,CAAC,IAAI,CAAC3B,MAAM,CAAC,CAAC;EAC7D"},"metadata":{},"sourceType":"module","externalDependencies":[]}