{"ast":null,"code":"export class AppComponent {\n  constructor() {\n    this.title = 'estacionamento';\n    this.owner = '';\n    // Restante do código...\n  }\n  // Restante do código...\n  onClickSend() {\n    const name = document.querySelector(\"#name\")?.value;\n    const licence = document.querySelector(\"#licence\")?.value;\n    if (!name || !licence) {\n      alert(\"Os campos são obrigatórios.\");\n      return;\n    }\n    // Verifica se a entrada corresponde ao padrão de placa\n    const licensePlateRegex = /^[A-Z]{3}-\\d{4}$/; // Exemplo: AAA-1234\n    if (!licensePlateRegex.test(licence)) {\n      alert(\"Placa inválida. O formato deve ser AAA-1234.\");\n      return;\n    }\n    // Verifica se o campo de nome do dono foi preenchido\n    if (!this.owner) {\n      alert(\"O campo Nome do Dono é obrigatório.\");\n      return;\n    }\n    const card = {\n      name,\n      licence,\n      time: new Date(),\n      owner: this.owner\n    };\n    const garage = this.getGarage();\n    garage.push(card);\n    localStorage.setItem('garage', JSON.stringify(garage));\n    this.addCarToGarage(card);\n    document.querySelector(\"#name\").value = \"\";\n    document.querySelector(\"#licence\").value = \"\";\n    this.owner = \"\"; // Limpa o campo do nome do dono\n  }\n}","map":{"version":3,"names":["AppComponent","constructor","title","owner","onClickSend","name","document","querySelector","value","licence","alert","licensePlateRegex","test","card","time","Date","garage","getGarage","push","localStorage","setItem","JSON","stringify","addCarToGarage"],"sources":["D:\\Angular\\estacionamento\\src\\app\\app.component.ts"],"sourcesContent":["export class AppComponent {\n    title = 'estacionamento';\n    owner = '';\n  \n    // Restante do código...\n  \n    onClickSend(): void {\n      const name = (<HTMLInputElement>document.querySelector(\"#name\"))?.value;\n      const licence = (<HTMLInputElement>document.querySelector(\"#licence\"))?.value;\n  \n      if (!name || !licence) {\n        alert(\"Os campos são obrigatórios.\");\n        return;\n      }\n  \n      // Verifica se a entrada corresponde ao padrão de placa\n      const licensePlateRegex = /^[A-Z]{3}-\\d{4}$/; // Exemplo: AAA-1234\n      if (!licensePlateRegex.test(licence)) {\n        alert(\"Placa inválida. O formato deve ser AAA-1234.\");\n        return;\n      }\n  \n      // Verifica se o campo de nome do dono foi preenchido\n      if (!this.owner) {\n        alert(\"O campo Nome do Dono é obrigatório.\");\n        return;\n      }\n  \n      const card = { name, licence, time: new Date(), owner: this.owner };\n      const garage = this.getGarage();\n      garage.push(card);\n      localStorage.setItem('garage', JSON.stringify(garage));\n      this.addCarToGarage(card);\n      (<HTMLInputElement>document.querySelector(\"#name\")).value = \"\";\n      (<HTMLInputElement>document.querySelector(\"#licence\")).value = \"\";\n      this.owner = \"\"; // Limpa o campo do nome do dono\n    }\n  \n    // Restante do código...\n  }\n  "],"mappings":"AAAA,OAAM,MAAOA,YAAY;EAAzBC,YAAA;IACI,KAAAC,KAAK,GAAG,gBAAgB;IACxB,KAAAC,KAAK,GAAG,EAAE;IAoCV;EACF;EAnCE;EAEAC,WAAWA,CAAA;IACT,MAAMC,IAAI,GAAsBC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAE,EAAEC,KAAK;IACvE,MAAMC,OAAO,GAAsBH,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAE,EAAEC,KAAK;IAE7E,IAAI,CAACH,IAAI,IAAI,CAACI,OAAO,EAAE;MACrBC,KAAK,CAAC,6BAA6B,CAAC;MACpC;;IAGF;IACA,MAAMC,iBAAiB,GAAG,kBAAkB,CAAC,CAAC;IAC9C,IAAI,CAACA,iBAAiB,CAACC,IAAI,CAACH,OAAO,CAAC,EAAE;MACpCC,KAAK,CAAC,8CAA8C,CAAC;MACrD;;IAGF;IACA,IAAI,CAAC,IAAI,CAACP,KAAK,EAAE;MACfO,KAAK,CAAC,qCAAqC,CAAC;MAC5C;;IAGF,MAAMG,IAAI,GAAG;MAAER,IAAI;MAAEI,OAAO;MAAEK,IAAI,EAAE,IAAIC,IAAI,EAAE;MAAEZ,KAAK,EAAE,IAAI,CAACA;IAAK,CAAE;IACnE,MAAMa,MAAM,GAAG,IAAI,CAACC,SAAS,EAAE;IAC/BD,MAAM,CAACE,IAAI,CAACL,IAAI,CAAC;IACjBM,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEC,IAAI,CAACC,SAAS,CAACN,MAAM,CAAC,CAAC;IACtD,IAAI,CAACO,cAAc,CAACV,IAAI,CAAC;IACNP,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAE,CAACC,KAAK,GAAG,EAAE;IAC3CF,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAE,CAACC,KAAK,GAAG,EAAE;IACjE,IAAI,CAACL,KAAK,GAAG,EAAE,CAAC,CAAC;EACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}