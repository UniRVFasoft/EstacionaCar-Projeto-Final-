{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { format } from 'date-fns';\nlet AppComponent = class AppComponent {\n  constructor() {\n    this.title = 'estacionamento';\n    this.owner = '';\n  }\n  convertPeriod(mil) {\n    const min = Math.floor(mil / 60000);\n    const sec = Math.floor(mil % 60000 / 1000);\n    return `${min}m e ${sec}s`;\n  }\n  renderGarage() {\n    const garage = this.getGarage();\n    const garageElement = document.querySelector(\"#garage\");\n    if (garageElement) {\n      garageElement.innerHTML = \"\";\n      garage.forEach(c => {\n        const carWithOwner = {\n          ...c,\n          owner: this.owner\n        };\n        this.addCarToGarage(carWithOwner);\n      });\n    }\n  }\n  addCarToGarage(car) {\n    const row = document.createElement(\"tr\");\n    row.innerHTML = `\n      <td class=\"data-cell\">${car.name}</td>\n      <td>${car.licence}</td>\n      <td>${car.owner}</td>\n      <td data-time=\"${car.time}\">\n        ${this.formatDateTime(new Date(car.time))}\n      </td>\n      <td>\n        <button class=\"delete\">Excluir</button>\n      </td>\n    `;\n    const garageElement = document.querySelector(\"#garage\");\n    if (garageElement) {\n      garageElement.appendChild(row);\n    }\n  }\n  formatDateTime(dateTime) {\n    return format(dateTime, 'dd/MM/yyyy HH:mm');\n  }\n  onClickSend() {\n    const owner = document.querySelector(\"#owner\")?.value;\n    const name = document.querySelector(\"#name\")?.value;\n    const licence = document.querySelector(\"#licence\")?.value;\n    if (!name || !licence) {\n      alert(\"Os campos são obrigatórios.\");\n      return;\n    }\n    // Verifica se a entrada corresponde ao padrão de placa\n    const licensePlateRegex = /^[A-Z]{3}-\\d{4}$/; // Exemplo: AAA-1234\n    if (!licensePlateRegex.test(licence)) {\n      alert(\"Placa inválida. O formato deve ser AAA-1234.\");\n      return;\n    }\n    // Verifica se o campo de nome do dono foi preenchido\n    if (!owner) {\n      alert(\"O campo Proprietário é obrigatório.\");\n      return;\n    }\n    const time = new Date().toISOString(); // Obter a data e hora atual em formato ISO string\n    const car = {\n      name,\n      licence,\n      time,\n      owner\n    };\n    const garage = this.getGarage();\n    garage.push(car);\n    localStorage.setItem('garage', JSON.stringify(garage));\n    this.addCarToGarage(car);\n    document.querySelector(\"#name\").value = \"\";\n    document.querySelector(\"#licence\").value = \"\";\n    document.querySelector(\"#owner\").value = \"\";\n  }\n  showHistory() {\n    const garage = this.getGarage();\n    if (garage.length > 0) {\n      const history = garage.map(car => `${car.name} - ${car.licence}`).join('\\n');\n      alert(`Histórico de Veículos:\\n${history}`);\n    } else {\n      alert(\"Não há veículos no histórico.\");\n    }\n  }\n  ngOnInit() {\n    this.owner = localStorage.getItem('owner') || '';\n    this.renderGarage();\n    const sendButton = document.querySelector(\"#send\");\n    if (sendButton) {\n      sendButton.addEventListener(\"click\", () => {\n        this.onClickSend();\n      });\n    }\n    const garageElement = document.querySelector(\"#garage\");\n    if (garageElement) {\n      garageElement.addEventListener(\"click\", e => {\n        const target = e.target;\n        if (target.className === \"delete\") {\n          const tableRow = target.parentElement?.parentElement;\n          if (tableRow) {\n            const cells = Array.from(tableRow.cells);\n            this.checkOut(cells);\n          }\n        }\n      });\n    }\n  }\n  checkOut(info) {\n    const period = Date.now() - new Date(info[2].dataset['time']).getTime();\n    const formattedPeriod = this.convertPeriod(period);\n    const licence = info[1].textContent;\n    const msg = `O veículo ${info[0].textContent} de placa ${licence} permaneceu ${formattedPeriod} estacionado.\\n\\nDeseja encerrar?`;\n    if (!confirm(msg)) return;\n    const garage = this.getGarage().filter(c => c.licence !== licence);\n    localStorage.setItem('garage', JSON.stringify(garage));\n    this.renderGarage();\n  }\n  getGarage() {\n    const garageData = localStorage.getItem('garage');\n    return garageData ? JSON.parse(garageData) : [];\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"names":["Component","format","AppComponent","constructor","title","owner","convertPeriod","mil","min","Math","floor","sec","renderGarage","garage","getGarage","garageElement","document","querySelector","innerHTML","forEach","c","carWithOwner","addCarToGarage","car","row","createElement","name","licence","time","formatDateTime","Date","appendChild","dateTime","onClickSend","value","alert","licensePlateRegex","test","toISOString","push","localStorage","setItem","JSON","stringify","showHistory","length","history","map","join","ngOnInit","getItem","sendButton","addEventListener","e","target","className","tableRow","parentElement","cells","Array","from","checkOut","info","period","now","dataset","getTime","formattedPeriod","textContent","msg","confirm","filter","garageData","parse","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Angular\\estacionamento\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { format } from 'date-fns';\n\ninterface Car {\n  name: string;\n  licence: string;\n  time: string;\n  owner: string;\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'estacionamento';\n  owner = '';\n\n  convertPeriod(mil: number): string {\n    const min = Math.floor(mil / 60000);\n    const sec = Math.floor((mil % 60000) / 1000);\n    return `${min}m e ${sec}s`;\n  }\n\n  renderGarage(): void {\n    const garage = this.getGarage();\n    const garageElement = document.querySelector(\"#garage\");\n    if (garageElement) {\n      garageElement.innerHTML = \"\";\n      garage.forEach(c => {\n        const carWithOwner = { ...c, owner: this.owner };\n        this.addCarToGarage(carWithOwner);\n      });\n    }\n  }\n\n  addCarToGarage(car: Car): void {\n    const row = document.createElement(\"tr\");\n    row.innerHTML = `\n      <td class=\"data-cell\">${car.name}</td>\n      <td>${car.licence}</td>\n      <td>${car.owner}</td>\n      <td data-time=\"${car.time}\">\n        ${this.formatDateTime(new Date(car.time))}\n      </td>\n      <td>\n        <button class=\"delete\">Excluir</button>\n      </td>\n    `;\n    const garageElement = document.querySelector(\"#garage\");\n    if (garageElement) {\n      garageElement.appendChild(row);\n    }\n  }\n\n  formatDateTime(dateTime: Date): string {\n    return format(dateTime, 'dd/MM/yyyy HH:mm');\n  }\n\n  onClickSend(): void {\n    const owner = (<HTMLInputElement>document.querySelector(\"#owner\"))?.value;\n    const name = (<HTMLInputElement>document.querySelector(\"#name\"))?.value;\n    const licence = (<HTMLInputElement>document.querySelector(\"#licence\"))?.value;\n\n    if (!name || !licence) {\n      alert(\"Os campos são obrigatórios.\");\n      return;\n    }\n\n    // Verifica se a entrada corresponde ao padrão de placa\n    const licensePlateRegex = /^[A-Z]{3}-\\d{4}$/; // Exemplo: AAA-1234\n    if (!licensePlateRegex.test(licence)) {\n      alert(\"Placa inválida. O formato deve ser AAA-1234.\");\n      return;\n    }\n\n    // Verifica se o campo de nome do dono foi preenchido\n    if (!owner) {\n      alert(\"O campo Proprietário é obrigatório.\");\n      return;\n    }\n\n    const time = new Date().toISOString(); // Obter a data e hora atual em formato ISO string\n    const car: Car = { name, licence, time, owner };\n    const garage = this.getGarage();\n    garage.push(car);\n    localStorage.setItem('garage', JSON.stringify(garage));\n    this.addCarToGarage(car);\n    (<HTMLInputElement>document.querySelector(\"#name\")).value = \"\";\n    (<HTMLInputElement>document.querySelector(\"#licence\")).value = \"\";\n    (<HTMLInputElement>document.querySelector(\"#owner\")).value = \"\";\n  }\n\n  showHistory(): void {\n    const garage = this.getGarage();\n    if (garage.length > 0) {\n      const history = garage.map(car => `${car.name} - ${car.licence}`).join('\\n');\n      alert(`Histórico de Veículos:\\n${history}`);\n    } else {\n      alert(\"Não há veículos no histórico.\");\n    }\n  }\n\n  ngOnInit(): void {\n    this.owner = localStorage.getItem('owner') || '';\n    this.renderGarage();\n    const sendButton = document.querySelector<HTMLButtonElement>(\"#send\");\n    if (sendButton) {\n      sendButton.addEventListener(\"click\", () => {\n        this.onClickSend();\n      });\n    }\n    const garageElement = document.querySelector<HTMLTableElement>(\"#garage\");\n    if (garageElement) {\n      garageElement.addEventListener(\"click\", (e) => {\n        const target = e.target as HTMLElement;\n        if (target.className === \"delete\") {\n          const tableRow = target.parentElement?.parentElement as HTMLTableRowElement;\n          if (tableRow) {\n            const cells = Array.from(tableRow.cells) as HTMLTableDataCellElement[];\n            this.checkOut(cells);\n          }\n        }\n      });\n    }\n  }\n\n  checkOut(info: HTMLTableDataCellElement[]): void {\n    const period: number = Date.now() - new Date(info[2].dataset['time']!).getTime();\n    const formattedPeriod: string = this.convertPeriod(period);\n    const licence: string = info[1].textContent!;\n    const msg: string = `O veículo ${info[0].textContent} de placa ${licence} permaneceu ${formattedPeriod} estacionado.\\n\\nDeseja encerrar?`;\n    if (!confirm(msg)) return;\n    const garage: Car[] = this.getGarage().filter(c => c.licence !== licence);\n    localStorage.setItem('garage', JSON.stringify(garage));\n    this.renderGarage();\n  }\n\n  getGarage(): Car[] {\n    const garageData = localStorage.getItem('garage');\n    return garageData ? JSON.parse(garageData) : [];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}